아래와 같은 웹게임 플랫폼을 개발중이야.

개발하는 시스템은 이런 구조야. 깃헙 이슈 내용을 확인해.
https://github.com/lisyoen/training/issues/1

<< 요청사항 >>

1. 클라이언트와 서버를 동시에 실행할 수 있는 스크립트를 작성해야 합니다.
2. 작성된 스크립트를 실행하여 두 포트(8000, 8001)가 모두 열리는지 확인해야 합니다.
3. 실행 후 프로세스 상태와 포트 상태를 점검하여 정상적으로 작동하는지 확인해야 합니다.
4. 문제가 발생할 경우, 로그를 확인하고 수정해야 합니다.

추가로 필요한 파일은 알려주면 전달할께.
.
├── README.md                  # 프로젝트 개요와 실행 방법 설명
├── chat.txt                   # 프로젝트 관련 메모나 대화 기록
├── client                     # 프론트엔드 React 애플리케이션 디렉토리
│   ├── README.md              # 프론트엔드 관련 설명 문서
│   ├── eslint.config.js       # ESLint 설정 파일
│   ├── index.html             # React 애플리케이션의 진입점 HTML 파일
│   ├── package-lock.json      # 프론트엔드 의존성 잠금 파일
│   ├── package.json           # 프론트엔드 프로젝트 메타데이터와 의존성 정의
│   ├── src                    # React 소스 코드 디렉토리
│   │   ├── App.css            # 전역 스타일 정의
│   │   ├── App.tsx            # React 루트 컴포넌트
│   │   ├── assets             # 정적 자산 디렉토리
│   │   │   └── react.svg      # React 로고 이미지
│   │   ├── index.css          # 기본 스타일 정의
│   │   ├── main.tsx           # React 애플리케이션 진입점
│   │   ├── pages              # 페이지 컴포넌트 디렉토리
│   │   │   ├── Home.tsx       # 게임 목록 및 실행 화면 컴포넌트
│   │   │   └── Upload.tsx     # 게임 업로드 화면 컴포넌트
│   │   └── vite-env.d.ts      # Vite 환경에서 TypeScript 타입 정의
│   ├── tsconfig.app.json      # 프론트엔드 TypeScript 설정 파일
│   ├── tsconfig.json          # 프론트엔드 프로젝트 TypeScript 설정 파일
│   ├── tsconfig.node.json     # Node.js 관련 TypeScript 설정 파일
│   └── vite.config.ts         # Vite 개발 서버 설정 파일
├── distutils.zip              # 배포 관련 유틸리티 파일
├── gpt.txt                    # 프로젝트 관련 요청사항이나 설명
├── package-lock.json          # 의존성 잠금 파일
├── package.json               # 프로젝트 메타데이터와 의존성 정의
├── run-dev.sh                 # 개발 서버 실행 스크립트
├── src                        # 백엔드 Express 애플리케이션 디렉토리
│   ├── App.tsx                # React 루트 컴포넌트 (중복된 파일로 보임)
│   ├── app.ts                 # Express 서버 진입점
│   ├── pages                  # React 페이지 컴포넌트 디렉토리
│   │   ├── Home.tsx           # 게임 목록 및 실행 화면 컴포넌트
│   │   └── Upload.tsx         # 게임 업로드 화면 컴포넌트
│   ├── routes                 # Express 라우트 핸들러 디렉토리
│   │   ├── delete.ts          # 게임 삭제 API 라우트
│   │   ├── games.ts           # 게임 목록 조회 및 등록 API 라우트
│   │   ├── register.ts        # 게임 등록 API 라우트
│   │   └── upload.ts          # 파일 업로드 API 라우트
│   └── utils.ts               # 데이터베이스 초기화 및 유틸리티 함수
├── test.db                    # SQLite 데이터베이스 파일
├── tree.txt                   # 프로젝트 디렉토리 구조 기록
└── tsconfig.json              # TypeScript 컴파일러 설정 파일

8 directories, 36 files


# WebGame Platform

Gemini Canvas 같은 툴로 만든 HTML 게임을 업로드하면  
게시판처럼 등록되고, 클릭하면 바로 실행되는 웹게임 플랫폼입니다.

이 플랫폼은 사용자가 간단한 HTML 기반 게임을 업로드하고,  
다른 사용자들이 이를 쉽게 탐색하고 실행할 수 있도록 설계되었습니다.  
iframe을 통해 즉시 실행할 수 있습니다.

---

## 기능

- 게임 목록 보기
- iframe으로 즉시 실행
- 게임 삭제 기능

---

## 기술 스택

- **개발도구**: VSCode + Copilot + ChatGPT 4o

- **백엔드**: Node.js + TypeScript + Express
- **DB**: SQLite (게임 메타 정보 저장)
- **기타**: Multer, UUID

---

## 실행 방법

```bash
npm install
npx ts-node

package.json
{
  "name": "webgame-platform",
  "version": "1.0.0",
  "description": "A platform for uploading and playing web games.",
  "main": "src/app.ts",
  "scripts": {
    "postinstall": "cd client && npm install",
    "prestart": "npm run build",
    "start": "npx pm2 start pm2.json",
    "stop": "npx pm2 stop pm2.json",
    "restart": "npx pm2 restart pm2.json",
    "delete": "npx pm2 delete pm2.json",
    "build": "tsc",
    "tree": "tree -I 'node_modules|data|cpython-3.12|public|uploads|logs|dist|dist-ssr|*.log|*.local|.vscode|.idea|.DS_Store|*.suo|*.ntvs*|*.njsproj|*.sln|*.sw?' --prune > tree.txt",
    "gpt": "cp gpt.txt chat.txt && cat tree.txt >> chat.txt && echo \"\n\" >> chat.txt &&cat README.md >> chat.txt && echo package.json >> chat.txt && cat package.json >> chat.txt && echo ./client/package.json >> chat.txt && cat ./client/package.json >> chat.txt",
    "dev": "ts-node-dev src/app.ts",
    "start:client": "cd client && npm run dev &",
    "start:server": "ts-node-dev src/app.ts &",
    "start:all": "npm run stop:all && concurrently -k \"npm run dev:client\" \"npm run dev:server\"",
    "stop:all": "npx pm2 delete all",
    "dev:client": "cd client && vite",
    "dev:server": "ts-node-dev src/app.ts"
  },
  "dependencies": {
    "better-sqlite3": "^11.9.1",
    "cors": "^2.8.5",
    "dotenv": "^10.0.0",
    "ejs": "^3.1.6",
    "express": "^4.17.1",
    "multer": "^1.4.2",
    "pm2": "^6.0.5",
    "typescript": "^5.8.3",
    "unzipper": "^0.10.11",
    "uuid": "^8.3.2"
  },
  "devDependencies": {
    "@types/better-sqlite3": "^7.6.13",
    "@types/cors": "^2.8.18",
    "@types/express": "^5.0.1",
    "@types/multer": "^1.4.12",
    "@types/unzipper": "^0.10.11",
    "@types/uuid": "^10.0.0",
    "concurrently": "^9.1.2",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0"
  },
  "keywords": [
    "web",
    "games",
    "platform"
  ],
  "author": "Your Name",
  "license": "MIT"
}
./client/package.json
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "start-client": "vite"
  },
  "dependencies": {
    "@uiw/react-codemirror": "^4.23.12",
    "codemirror": "^6.0.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.26.1",
    "vite": "^6.3.1"
  }
}
