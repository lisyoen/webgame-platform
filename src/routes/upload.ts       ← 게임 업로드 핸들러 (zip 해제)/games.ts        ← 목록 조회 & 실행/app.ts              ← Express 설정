Contents of /webgame-platform/src/routes/upload.ts:

import express from 'express';
import multer from 'multer';
import fs from 'fs';
import path from 'path';
import unzipper from 'unzipper';
import { v4 as uuidv4 } from 'uuid';

const router = express.Router();
const upload = multer({ dest: 'uploads/' });

router.post('/upload', upload.single('gameZip'), async (req, res) => {
    const gameId = uuidv4();
    const uploadPath = path.join(__dirname, '../../uploads', gameId);

    try {
        fs.mkdirSync(uploadPath, { recursive: true });
        fs.createReadStream(req.file.path)
            .pipe(unzipper.Extract({ path: uploadPath }))
            .on('close', () => {
                fs.unlinkSync(req.file.path); // Remove the zip file after extraction
                res.status(200).json({ message: 'Game uploaded successfully', gameId });
            });
    } catch (error) {
        res.status(500).json({ message: 'Error uploading game', error });
    }
});

export default router;

Contents of /webgame-platform/src/routes/games.ts:

import express from 'express';
import sqlite3 from 'sqlite3';
import path from 'path';

const router = express.Router();
const db = new sqlite3.Database(path.join(__dirname, '../../data/games.db'));

router.get('/games', (req, res) => {
    db.all('SELECT * FROM games', [], (err, rows) => {
        if (err) {
            res.status(500).json({ message: 'Error retrieving games', error: err });
            return;
        }
        res.status(200).json(rows);
    });
});

router.get('/games/:id', (req, res) => {
    const gameId = req.params.id;
    // Logic to execute the game can be added here
    res.status(200).json({ message: `Executing game with ID: ${gameId}` });
});

export default router;

Contents of /webgame-platform/src/app.ts:

import express from 'express';
import bodyParser from 'body-parser';
import uploadRoutes from './routes/upload';
import gameRoutes from './routes/games';
import path from 'path';

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, '../public')));

app.use('/api', uploadRoutes);
app.use('/api', gameRoutes);

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});